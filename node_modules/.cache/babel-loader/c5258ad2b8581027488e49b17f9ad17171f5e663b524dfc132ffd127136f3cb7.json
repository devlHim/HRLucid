{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hpanchal\\\\Repos\\\\HRLucid\\\\src\\\\component\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = ({\n  endpoint\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const handleMessageSubmit = async () => {\n    if (inputMessage.trim() === '') return;\n\n    // Add user message to the chat\n    const newMessage = {\n      text: inputMessage,\n      sender: 'user'\n    };\n    setMessages([...messages, newMessage]);\n    setInputMessage('');\n    try {\n      // Send user message to the chatbot API endpoint\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: inputMessage\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n\n        // Add chatbot's response to the chat\n        const botMessage = {\n          text: data.message,\n          sender: 'bot'\n        };\n        setMessages([...messages, botMessage]);\n      } else {\n        console.error('Failed to fetch response from chatbot API');\n      }\n    } catch (error) {\n      console.error('Error communicating with chatbot API:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.messageContainer,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter') {\n            handleMessageSubmit();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMessageSubmit,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"EsKTm9PYySfYQYLkuLRorTz0Yzg=\");\n_c = Chatbot;\nconst styles = {\n  container: {\n    position: 'fixed',\n    bottom: '20px',\n    right: '20px',\n    width: '300px',\n    backgroundColor: '#fff',\n    border: '1px solid #ccc',\n    borderRadius: '8px',\n    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n    zIndex: '999'\n  },\n  messageContainer: {\n    maxHeight: '200px',\n    overflowY: 'auto',\n    padding: '10px'\n  },\n  inputContainer: {\n    borderTop: '1px solid #ccc',\n    padding: '10px',\n    display: 'flex',\n    alignItems: 'center'\n  }\n};\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","endpoint","_s","messages","setMessages","inputMessage","setInputMessage","handleMessageSubmit","trim","newMessage","text","sender","response","fetch","method","headers","body","JSON","stringify","message","ok","data","json","botMessage","console","error","style","styles","container","children","messageContainer","map","index","className","fileName","_jsxFileName","lineNumber","columnNumber","inputContainer","type","placeholder","value","onChange","e","target","onKeyDown","key","onClick","_c","position","bottom","right","width","backgroundColor","border","borderRadius","boxShadow","zIndex","maxHeight","overflowY","padding","borderTop","display","alignItems","$RefreshReg$"],"sources":["C:/Users/hpanchal/Repos/HRLucid/src/component/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Chatbot = ({ endpoint }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n\r\n  const handleMessageSubmit = async () => {\r\n    if (inputMessage.trim() === '') return;\r\n\r\n    // Add user message to the chat\r\n    const newMessage = { text: inputMessage, sender: 'user' };\r\n    setMessages([...messages, newMessage]);\r\n    setInputMessage('');\r\n\r\n    try {\r\n      // Send user message to the chatbot API endpoint\r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message: inputMessage }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n\r\n        // Add chatbot's response to the chat\r\n        const botMessage = { text: data.message, sender: 'bot' };\r\n        setMessages([...messages, botMessage]);\r\n      } else {\r\n        console.error('Failed to fetch response from chatbot API');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error communicating with chatbot API:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.messageContainer}>\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div style={styles.inputContainer}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type a message...\"\r\n          value={inputMessage}\r\n          onChange={(e) => setInputMessage(e.target.value)}\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Enter') {\r\n              handleMessageSubmit();\r\n            }\r\n          }}\r\n        />\r\n        <button onClick={handleMessageSubmit}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'fixed',\r\n    bottom: '20px',\r\n    right: '20px',\r\n    width: '300px',\r\n    backgroundColor: '#fff',\r\n    border: '1px solid #ccc',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\r\n    zIndex: '999',\r\n  },\r\n  messageContainer: {\r\n    maxHeight: '200px',\r\n    overflowY: 'auto',\r\n    padding: '10px',\r\n  },\r\n  inputContainer: {\r\n    borderTop: '1px solid #ccc',\r\n    padding: '10px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}